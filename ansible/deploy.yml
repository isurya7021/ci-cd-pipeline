---
- hosts: app_servers
  become: yes
  vars:
    version: "{{ version }}"
    app_name: "{{ app_name }}"
    nexus_url: "{{ nexus_url }}"
    repo: "{{ repo }}"
    install_dir: /opt/{{ app_name }}
    venv_dir: "{{ install_dir }}/venv"

  tasks:
    - name: Ensure Python3 venv is installed
      apt:
        name: python3-venv
        state: present
        update_cache: yes

    - name: Create install directory
      file:
        path: "{{ install_dir }}"
        state: directory
        mode: '0755'

    - name: Create virtual environment
      command: python3 -m venv "{{ venv_dir }}"
      args:
        creates: "{{ venv_dir }}/bin/activate"

    - name: Download artifact from Nexus
      get_url:
        url: "{{ nexus_url }}/repository/{{ repo }}/{{ app_name }}-{{ version }}-py3-none-any.whl"
        dest: "{{ install_dir }}/"
        url_username: "{{ lookup('env','NEXUS_USER') }}"
        url_password: "{{ lookup('env','NEXUS_PASS') }}"

    - name: Find the downloaded wheel
      find:
        paths: "{{ install_dir }}"
        patterns: "{{ app_name }}-{{ version }}-py3-none-any.whl"
      register: wheel_file

    - name: Install application from wheel in virtual environment
      pip:
        name: "{{ wheel_file.files[0].path }}"
        virtualenv: "{{ venv_dir }}"
        state: present

    - name: Ensure systemd service file for app exists
      copy:
        dest: /etc/systemd/system/{{ app_name }}.service
        content: |
          [Unit]
          Description={{ app_name }} service
          After=network.target

          [Service]
          User=root
          WorkingDirectory={{ install_dir }}
          ExecStart={{ venv_dir }}/bin/python -m {{ app_name }}
          Restart=always

          [Install]
          WantedBy=multi-user.target
      owner: root
      group: root
      mode: '0644'
      notify:
        - restart {{ app_name }}

  handlers:
    - name: restart {{ app_name }}
      systemd:
        name: "{{ app_name }}"
        state: restarted
        enabled: yes
        daemon_reload: yes
